{
  "name": "Add a new post",
  "event": [
    {
      "listen": "test",
      "script": {
        "exec": [
          "const Ajv = require('ajv');\r",
          "const ajv = new Ajv();\r",
          "const jsonData = pm.response.json();\r",
          "\r",
          "const createPostSchema = {\r",
          "    type: \"object\",\r",
          "    properties: {\r",
          "        id: {\r",
          "            type: \"integer\"\r",
          "        },\r",
          "        title: {\r",
          "            type: \"string\"\r",
          "        },\r",
          "        body: {\r",
          "            type: \"string\"\r",
          "        },\r",
          "        userId: {\r",
          "            type: \"integer\"\r",
          "        },\r",
          "    },\r",
          "    required: ['id', 'title', 'body', 'userId']\r",
          "}\r",
          "\r",
          "pm.collectionVariables.set(\"newPost\", JSON.stringify(jsonData));\r",
          "const newPost = JSON.parse(pm.collectionVariables.get('newPost'));\r",
          "const validate = ajv.compile(createPostSchema);\r",
          "\r",
          "pm.test(\"Status code is 201\", () => {\r",
          "    pm.response.to.have.status(201)\r",
          "});\r",
          "\r",
          "pm.test('Content-Type is application/json', () => {\r",
          "  pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
          "});\r",
          "\r",
          "pm.test('Response is valid JSON', () => {\r",
          "  pm.expect(() => pm.response.json()).to.not.throw();\r",
          "});\r",
          "\r",
          "pm.test(\"Response schema should match the expected format\", () => {\r",
          "    const valid = validate(jsonData)\r",
          "    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
          "});\r",
          "\r",
          "pm.test(\"Response containts required properties\", () => {\r",
          "    const props = ['id', 'title', 'body', 'userId'];\r",
          "    props.forEach((data) => pm.expect(jsonData).to.have.property(data))\r",
          "});\r",
          "\r",
          "pm.test(\"Response values as expected\", () => {\r",
          "    pm.expect(jsonData.id).to.eql(newPost.id);\r",
          "    pm.expect(jsonData.title).to.eql(newPost.title);\r",
          "    pm.expect(jsonData.body).to.eql(newPost.body);\r",
          "    pm.expect(jsonData.userId).to.eql(newPost.userId);\r",
          "});\r",
          "\r",
          "pm.test(\"Response time is under 200ms\", () => {\r",
          "    pm.expect(pm.response.responseTime).to.below(300);\r",
          "})\r",
          "\r",
          "\r",
          ""
        ],
        "type": "text/javascript",
        "packages": {}
      }
    },
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript",
        "packages": {}
      }
    }
  ],
  "request": {
    "method": "POST",
    "header": [],
    "body": {
      "mode": "raw",
      "raw": "{\r\n    \"title\": \"I am in love with someone.\",\r\n    \"body\": \"lorem ipsume dolor sit amet\",\r\n    \"userId\": 1\r\n}",
      "options": {
        "raw": {
          "language": "json"
        }
      }
    },
    "url": {
      "raw": "{{baseUrl}}posts/add",
      "host": [
        "{{baseUrl}}posts"
      ],
      "path": [
        "add"
      ]
    }
  },
  "response": []
}