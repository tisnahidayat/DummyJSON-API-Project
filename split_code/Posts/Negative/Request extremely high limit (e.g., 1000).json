{
  "name": "Request extremely high limit (e.g., 1000)",
  "event": [
    {
      "listen": "test",
      "script": {
        "exec": [
          "const Ajv = require('ajv');\r",
          "const ajv = new Ajv();\r",
          "const jsonData = pm.response.json();\r",
          "\r",
          "const postsSchema = {\r",
          "  type: 'object',\r",
          "  properties: {\r",
          "    posts: {\r",
          "      type: 'array',\r",
          "      items: {\r",
          "        type: 'object',\r",
          "        properties: {\r",
          "          id: {\r",
          "            type: 'integer',\r",
          "          },\r",
          "          title: {\r",
          "            type: 'string',\r",
          "          },\r",
          "          body: {\r",
          "            type: 'string',\r",
          "          },\r",
          "          tags: {\r",
          "            type: 'array',\r",
          "            items: {\r",
          "              type: 'string',\r",
          "            },\r",
          "          },\r",
          "          reactions: {\r",
          "            type: 'object',\r",
          "            properties: {\r",
          "              likes: {\r",
          "                type: 'integer',\r",
          "              },\r",
          "              dislikes: {\r",
          "                type: 'integer',\r",
          "              },\r",
          "            },\r",
          "            required: ['likes', 'dislikes'],\r",
          "          },\r",
          "          views: {\r",
          "            type: 'integer',\r",
          "          },\r",
          "          userId: {\r",
          "            type: 'integer',\r",
          "          },\r",
          "        },\r",
          "        required: ['id', 'title', 'body', 'tags', 'reactions', 'views', 'userId'],\r",
          "        additionalProperties: false,\r",
          "      },\r",
          "    },\r",
          "    total: {\r",
          "      type: 'integer',\r",
          "    },\r",
          "    skip: {\r",
          "      type: 'integer',\r",
          "    },\r",
          "    limit: {\r",
          "      type: 'integer',\r",
          "    },\r",
          "  },\r",
          "  required: ['posts', 'total', 'skip', 'limit'],\r",
          "};\r",
          "\r",
          "pm.collectionVariables.set('allPosts', JSON.stringify(jsonData.posts));\r",
          "const postData = JSON.parse(pm.collectionVariables.get('allPosts'));\r",
          "\r",
          "const validate = ajv.compile(postsSchema);\r",
          "\r",
          "pm.test('Status code is 200', () => {\r",
          "  pm.response.to.have.status(200);\r",
          "});\r",
          "\r",
          "pm.test('Content-Type is application/json', () => {\r",
          "  pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
          "});\r",
          "\r",
          "pm.test('Response is valid JSON', () => {\r",
          "  pm.expect(() => pm.response.json()).to.not.throw();\r",
          "});\r",
          "\r",
          "pm.test('Response schema should match the expected format', () => {\r",
          "  const valid = validate(jsonData);\r",
          "  pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
          "});\r",
          "\r",
          "pm.test('Response contains required properties', () => {\r",
          "  const props = ['posts', 'total', 'skip', 'limit'];\r",
          "  props.forEach((data) => pm.expect(jsonData).to.have.property(data));\r",
          "});\r",
          "\r",
          "pm.test('The post data response contains the required properties.', () => {\r",
          "  if (jsonData.posts && jsonData.posts.length > 0) {\r",
          "    const props = ['id', 'title', 'body', 'tags', 'reactions', 'views', 'userId'];\r",
          "    jsonData.posts.forEach((post) => {\r",
          "      props.forEach((data) => pm.expect(post).to.have.property(data));\r",
          "    });\r",
          "  } else {\r",
          "    pm.expect(jsonData.posts.length, 'No posts available').to.be.greaterThan(0);\r",
          "  }\r",
          "});\r",
          "\r",
          "pm.test('Response values as expected', () => {\r",
          "  if (jsonData.posts && jsonData.posts.length > 0) {\r",
          "    pm.expect(jsonData.posts[0].id).to.eql(postData[0].id);\r",
          "    pm.expect(jsonData.posts[0].title).to.eql(postData[0].title);\r",
          "    pm.expect(jsonData.posts[0].body).to.eql(postData[0].body);\r",
          "    pm.expect(jsonData.posts[0].tags).to.eql(postData[0].tags);\r",
          "    pm.expect(jsonData.posts[0].reactions.likes).to.eql(postData[0].reactions.likes);\r",
          "    pm.expect(jsonData.posts[0].reactions.dislikes).to.eql(postData[0].reactions.dislikes);\r",
          "    pm.expect(jsonData.posts[0].views).to.eql(postData[0].views);\r",
          "    pm.expect(jsonData.posts[0].userId).to.eql(postData[0].userId);\r",
          "  }\r",
          "});\r",
          "\r",
          "pm.test(\"Response time is under 500ms\", () => {\r",
          "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
          "});\r",
          ""
        ],
        "type": "text/javascript",
        "packages": {}
      }
    }
  ],
  "request": {
    "method": "GET",
    "header": [],
    "url": {
      "raw": "{{baseUrl}}posts?limit=1000",
      "host": [
        "{{baseUrl}}posts"
      ],
      "query": [
        {
          "key": "skip",
          "value": "0",
          "disabled": true
        },
        {
          "key": "limit",
          "value": "1000"
        }
      ]
    }
  },
  "response": []
}