{
  "name": "Unexpected query param",
  "event": [
    {
      "listen": "test",
      "script": {
        "exec": [
          "const Ajv = require('ajv');\r",
          "const ajv = new Ajv();\r",
          "const jsonData = pm.response.json();\r",
          "\r",
          "const searchSchema = {\r",
          "  type: 'object',\r",
          "  properties: {\r",
          "    posts: {\r",
          "      type: 'array',\r",
          "      items: {\r",
          "        type: 'object',\r",
          "        properties: {\r",
          "          id: {\r",
          "            type: 'integer',\r",
          "          },\r",
          "          title: {\r",
          "            type: 'string',\r",
          "          },\r",
          "          body: {\r",
          "            type: 'string',\r",
          "          },\r",
          "          tags: {\r",
          "            type: 'array',\r",
          "            items: {\r",
          "              type: 'string',\r",
          "            },\r",
          "          },\r",
          "          reactions: {\r",
          "            type: 'object',\r",
          "            properties: {\r",
          "              likes: {\r",
          "                type: 'integer',\r",
          "              },\r",
          "              dislikes: {\r",
          "                type: 'integer',\r",
          "              },\r",
          "            },\r",
          "            required: ['likes', 'dislikes'],\r",
          "            additionalProperties: false,\r",
          "          },\r",
          "          views: {\r",
          "            type: 'integer',\r",
          "          },\r",
          "          userId: {\r",
          "            type: 'integer',\r",
          "          },\r",
          "        },\r",
          "        required: ['id', 'title', 'body', 'tags', 'reactions', 'views', 'userId'],\r",
          "        additionalProperties: false,\r",
          "      },\r",
          "    },\r",
          "    total: {\r",
          "      type: 'integer',\r",
          "    },\r",
          "    skip: {\r",
          "      type: 'integer',\r",
          "    },\r",
          "    limit: {\r",
          "      type: 'integer',\r",
          "    },\r",
          "  },\r",
          "  required: ['posts', 'total', 'skip', 'limit'],\r",
          "};\r",
          "\r",
          "pm.collectionVariables.set('allPosts', JSON.stringify(jsonData.posts));\r",
          "const query = pm.collectionVariables.get('query');\r",
          "\r",
          "const validate = ajv.compile(searchSchema);\r",
          "\r",
          "pm.test('Status code is 200', () => {\r",
          "  pm.response.to.have.status(200);\r",
          "});\r",
          "\r",
          "pm.test('Content-Type is application/json', () => {\r",
          "  pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
          "});\r",
          "\r",
          "pm.test('Response is valid JSON', () => {\r",
          "  pm.expect(() => pm.response.json()).to.not.throw();\r",
          "});\r",
          "\r",
          "pm.test('Response schema should match the expected format', () => {\r",
          "  const valid = validate(jsonData);\r",
          "  pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
          "});\r",
          "\r",
          "pm.test('Response contains required properties', () => {\r",
          "  const props = ['posts', 'total', 'skip', 'limit'];\r",
          "  props.forEach((data) => pm.expect(jsonData).to.have.property(data));\r",
          "});\r",
          "\r",
          "pm.test('The post data response contains the required properties.', () => {\r",
          "  if (jsonData.posts && jsonData.posts.length > 0) {\r",
          "    const props = ['id', 'title', 'body', 'tags', 'reactions', 'views', 'userId'];\r",
          "    jsonData.posts.forEach((post) => {\r",
          "      props.forEach((data) => pm.expect(post).to.have.property(data));\r",
          "    });\r",
          "  } else {\r",
          "   pm.expect(jsonData.posts, 'Expected posts to be an empty array').to.be.a('array').that.is.empty;\r",
          "  }\r",
          "});\r",
          "\r",
          "pm.test(\"Response time is under 500ms\", () => {\r",
          "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
          "});\r",
          ""
        ],
        "type": "text/javascript",
        "packages": {}
      }
    },
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript",
        "packages": {}
      }
    }
  ],
  "protocolProfileBehavior": {
    "disableBodyPruning": true
  },
  "request": {
    "method": "GET",
    "header": [],
    "body": {
      "mode": "raw",
      "raw": "{\r\n    \"title\": \"Lorem ipsum\",\r\n    \"body\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit.\",\r\n    \"userId\": 1\r\n}"
    },
    "url": {
      "raw": "{{baseUrl}}posts/search?keyword=ABC",
      "host": [
        "{{baseUrl}}posts"
      ],
      "path": [
        "search"
      ],
      "query": [
        {
          "key": "keyword",
          "value": "ABC"
        }
      ]
    }
  },
  "response": []
}