{
  "name": "Valid Credentials",
  "event": [
    {
      "listen": "test",
      "script": {
        "exec": [
          "const Ajv = require('ajv');\r",
          "const ajv = new Ajv();\r",
          "const jsonData = pm.response.json();\r",
          "\r",
          "// JSON Schema Definition\r",
          "const schema = {\r",
          "    type: \"object\",\r",
          "    properties: {\r",
          "        accessToken: { type: \"string\" },\r",
          "        refreshToken: { type: \"string\" },\r",
          "        id: { type: \"integer\" },\r",
          "        username: { type: \"string\" },\r",
          "        email: {\r",
          "            type: \"string\",\r",
          "            pattern: \"^[\\\\w.-]+@[\\\\w.-]+\\\\.\\\\w+$\"\r",
          "        },\r",
          "        firstName: { type: \"string\" },\r",
          "        lastName: { type: \"string\" },\r",
          "        gender: {\r",
          "            type: \"string\",\r",
          "            enum: [\"male\", \"female\"]\r",
          "        },\r",
          "        image: { type: \"string\" }\r",
          "    },\r",
          "    required: [\"accessToken\", \"refreshToken\", \"id\", \"username\", \"email\", \"lastName\", \"gender\", \"image\"],\r",
          "    additionalProperties: false\r",
          "};\r",
          "\r",
          "const validate = ajv.compile(schema);\r",
          "\r",
          "// Set Variables\r",
          "pm.collectionVariables.set(\"userLogin\", JSON.stringify(jsonData));\r",
          "const data = JSON.parse(pm.collectionVariables.get(\"userLogin\"));\r",
          "\r",
          "// Basic Response Validations\r",
          "pm.test(\"Status code is 200\", () => {\r",
          "    pm.response.to.have.status(200);\r",
          "});\r",
          "\r",
          "pm.test(\"Content-Type is application/json\", () => {\r",
          "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
          "});\r",
          "\r",
          "pm.test(\"Response is valid JSON\", () => {\r",
          "    pm.expect(() => pm.response.json()).to.not.throw();\r",
          "});\r",
          "\r",
          "// Schema & Property Checks\r",
          "pm.test(\"Response schema should match the expected format\", () => {\r",
          "    const valid = validate(jsonData);\r",
          "    if (!valid) {\r",
          "        console.log(\"Schema validation errors:\", validate.errors);\r",
          "    }\r",
          "    pm.expect(valid, JSON.stringify(validate.errors, null, 2)).to.be.true;\r",
          "});\r",
          "\r",
          "pm.test(\"Response contains required properties\", () => {\r",
          "    const props = [\r",
          "        \"accessToken\", \"refreshToken\", \"id\", \"username\",\r",
          "        \"email\", \"firstName\", \"lastName\", \"gender\", \"image\"\r",
          "    ];\r",
          "    props.forEach(prop => {\r",
          "        pm.expect(jsonData).to.have.property(prop);\r",
          "    });\r",
          "});\r",
          "\r",
          "// Validate Value Accuracy\r",
          "pm.test(\"Response values are as expected\", () => {\r",
          "    pm.expect(jsonData.accessToken).to.eql(data.accessToken);\r",
          "    pm.expect(jsonData.refreshToken).to.eql(data.refreshToken);\r",
          "    pm.expect(jsonData.id).to.eql(data.id);\r",
          "    pm.expect(jsonData.username).to.eql(data.username);\r",
          "    pm.expect(jsonData.email).to.eql(data.email);\r",
          "    pm.expect(jsonData.firstName).to.eql(data.firstName);\r",
          "    pm.expect(jsonData.lastName).to.eql(data.lastName);\r",
          "    pm.expect(jsonData.gender).to.eql(data.gender);\r",
          "    pm.expect(jsonData.image).to.include(data.image);\r",
          "});\r",
          "\r",
          "// Type Assertions\r",
          "pm.test(\"Token fields should be strings\", () => {\r",
          "    pm.expect(jsonData.accessToken).to.be.a(\"string\");\r",
          "    pm.expect(jsonData.refreshToken).to.be.a(\"string\");\r",
          "});\r",
          "\r",
          "pm.test(\"User fields should have correct types\", () => {\r",
          "    pm.expect(jsonData.id).to.be.a(\"number\");\r",
          "    pm.expect(jsonData.username).to.be.a(\"string\");\r",
          "    pm.expect(jsonData.email).to.be.a(\"string\");\r",
          "    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
          "    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
          "    pm.expect(jsonData.gender).to.be.a(\"string\");\r",
          "    pm.expect(jsonData.image).to.be.a(\"string\");\r",
          "});\r",
          "\r",
          "\r",
          "// Performance\r",
          "pm.test(\"Response time is under 1000ms\", () => {\r",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
          "});\r",
          ""
        ],
        "type": "text/javascript",
        "packages": {}
      }
    },
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          ""
        ],
        "type": "text/javascript",
        "packages": {}
      }
    }
  ],
  "request": {
    "method": "POST",
    "header": [],
    "body": {
      "mode": "raw",
      "raw": "{\r\n    \"username\": \"sophiab\",\r\n    \"password\": \"sophiabpass\",\r\n    \"expiresInMins\": 1\r\n}",
      "options": {
        "raw": {
          "language": "json"
        }
      }
    },
    "url": {
      "raw": "{{baseUrl}}auth/login",
      "host": [
        "{{baseUrl}}auth"
      ],
      "path": [
        "login"
      ]
    }
  },
  "response": []
}