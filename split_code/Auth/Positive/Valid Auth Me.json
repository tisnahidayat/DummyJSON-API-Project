{
  "name": "Valid Auth Me",
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "const token = JSON.parse(pm.collectionVariables.get(\"userLogin\"))\r",
          "\r",
          "pm.request.headers.add({\r",
          "    key: \"Authorization\",\r",
          "    value: `Bearer ${token.accessToken}`\r",
          "});"
        ],
        "type": "text/javascript",
        "packages": {}
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "const Ajv = require('ajv');\r",
          "const ajv = new Ajv();\r",
          "const jsonData = pm.response.json();\r",
          "\r",
          "const userSchema = {\r",
          "    type: \"object\",\r",
          "    properties: {\r",
          "        id: {\r",
          "            type: \"number\"\r",
          "        },\r",
          "        username: {\r",
          "            type: \"string\"\r",
          "        },\r",
          "        password: {\r",
          "            type: \"string\"\r",
          "        },\r",
          "        email: {\r",
          "            type: \"string\",\r",
          "            pattern: \"^[\\\\w.-]+@[\\\\w.-]+\\\\.\\\\w+$\"\r",
          "        },\r",
          "        phone: {\r",
          "            type: \"string\"\r",
          "        },\r",
          "        gender: {\r",
          "            type: \"string\",\r",
          "            enum: ['male', 'female']\r",
          "        },\r",
          "        birthDate: {\r",
          "            type: \"string\",\r",
          "        },\r",
          "        role: {\r",
          "            type: \"string\"\r",
          "        }\r",
          "    },\r",
          "    required: ['id', 'username', 'password', 'email', 'phone', 'gender', 'birthDate', \"role\"]\r",
          "}\r",
          "const validate = ajv.compile(userSchema);\r",
          "\r",
          "pm.collectionVariables.set(\"userPartial\", JSON.stringify(jsonData))\r",
          "\r",
          "const user = JSON.parse(pm.collectionVariables.get('userPartial'));\r",
          "\r",
          "pm.test(\"Status code is 200\", () => {\r",
          "    pm.response.to.have.status(200);\r",
          "});\r",
          "\r",
          "pm.test(\"Content-Type is application/json\", () => {\r",
          "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
          "});\r",
          "\r",
          "pm.test(\"Response is valid JSON\", () => {\r",
          "    pm.expect(() => pm.response.json()).to.not.throw();\r",
          "});\r",
          "\r",
          "pm.test(\"Response schema should match the expected format\", () => {\r",
          "    const valid = validate(jsonData);\r",
          "    if (!valid) {\r",
          "        console.error(validate.errors);\r",
          "    };\r",
          "\r",
          "    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
          "});\r",
          "\r",
          "pm.test(\"Response contains required properties\", () => {\r",
          "    const props = ['id', 'username', 'password', 'gender', 'email', 'phone', 'birthDate'];\r",
          "\r",
          "    props.forEach((data) => pm.expect(jsonData).to.have.property(data))\r",
          "});\r",
          "\r",
          "pm.test(\"Response values are as expected\", () => {\r",
          "    pm.expect(jsonData.id).to.eql(user.id);\r",
          "    pm.expect(jsonData.username).to.eql(user.username);\r",
          "    pm.expect(jsonData.password).to.eql(user.password);\r",
          "    pm.expect(jsonData.gender).to.eql(user.gender);\r",
          "    pm.expect(jsonData.phone).to.include(user.phone);\r",
          "    pm.expect(jsonData.birthDate).to.include(user.birthDate);\r",
          "    pm.expect(jsonData.role).to.eql(user.role);\r",
          "});\r",
          "\r",
          "pm.test(\"Response time is under 1000ms\", () => {\r",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
          "});\r",
          ""
        ],
        "type": "text/javascript",
        "packages": {}
      }
    }
  ],
  "request": {
    "auth": {
      "type": "noauth"
    },
    "method": "GET",
    "header": [],
    "url": {
      "raw": "{{baseUrl}}auth/me",
      "host": [
        "{{baseUrl}}auth"
      ],
      "path": [
        "me"
      ]
    }
  },
  "response": []
}